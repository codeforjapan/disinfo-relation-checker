[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "disinfo-relation-checker"
description = "Check if a relation is disinformation"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "pydantic-settings>=2.0.0",
    "httpx>=0.24.0",
    "pyyaml>=6.0",
]
license = {text = "MIT"}
dynamic = ["version"]

[project.scripts]
disinfo-relation-checker = "disinfo_relation_checker.cli:main"


[tool.hatch.build.targets.wheel]
packages = ["src/disinfo_relation_checker"]
py.typed = true

[tool.hatch.version]
source = "regex"
pattern = '^__version__ = "(?P<version>.+)"$'
path = "src/disinfo_relation_checker/__init__.py"

[dependency-groups]
dev = [
    "mypy>=1.16.0",
    "nox>=2025.5.1",
    "pytest>=8.4.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "ruff>=0.11.13",
    "types-pyyaml>=6.0.12.20250516",
]

[tool.ruff]
target-version = "py311"
line-length = 120
lint.select = ["ALL"]
lint.ignore = [
    "D203",
    "COM812",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = []
"src/disinfo_relation_checker/cli.py" = [
    "T201",  # print statements needed for CLI output
    "BLE001",  # broad exception handling needed for CLI error handling
    "TRY301",  # abstract raise acceptable for CLI error handling
    "PLC0415",  # function-level imports acceptable for CLI modularity
]
"src/disinfo_relation_checker/llm_providers.py" = [
    "PLR2004",  # HTTP status code 200 is a well-known constant
]
"src/disinfo_relation_checker/model_registry.py" = [
    "PLR2004",  # version part count of 3 is semantically clear
    "PLW1641",  # BaseModel handles hashing properly
]
"src/disinfo_relation_checker/optimization_strategies.py" = [
    "S311",  # pseudo-random for prompt optimization, not cryptographic
    "PLR2004",  # small constants are clear in optimization context
    "SIM102",  # nested if needed for clarity in crossover logic
]
"src/disinfo_relation_checker/performance_monitoring.py" = [
    "PLR2004",  # epsilon value 1e-9 is standard for float comparison
    "ARG002",  # protocol methods may not use all arguments
]
"src/disinfo_relation_checker/prompt_optimizer.py" = [
    "S101",
    "PLW1641",  # BaseModel handles hashing properly
    "PLR2004",  # small constants are clear in optimization context
]
"src/disinfo_relation_checker/training_data.py" = [
    "PLR2004",  # mathematical constants and small values are clear
    "PLR0913",  # stratified split requires many parameters for flexibility
    "B007",  # loop variable may not be used when processing groups
]
"tests/*" = [
    "S101",
    "S108", 
    "S603",
    "B017",
    "PT011",
    "PERF401",
    "SLF001",
    "PLR2004",  # magic values in tests are test data, not constants
    "PLC0415",  # test imports can be local for isolation
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = false
strict_equality = true

[tool.pytest.ini_options]
addopts = ["-sv", "--doctest-modules"]
testpaths = [
    "tests",
    "src/disinfo_relation_checker",
]
pythonpath = [
    "src",
]
filterwarnings = [
    "error",
]
markers = [
    "e2e: marks tests as end-to-end tests"
]
